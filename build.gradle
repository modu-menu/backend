plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'modu.menu'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def queryDslVersion = '5.0.0'

dependencies {
    compileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.3.0'
    testImplementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-api', version: '2.3.0'
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation group: 'com.github.maricn', name: 'logback-slack-appender', version: '1.6.0'
    // Querydsl 추가
    // 필수
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    // QueryDsl 쿼리 타입 생성 (QClass 생성 시 @Entity 탐색)
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    // java.lang.NoClassDefFoundError:javax/persistence/Entity 에러 방지
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
}

// Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}

test {
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(false)
        csv.required.set(false)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/config/**",
                            "**/*Application*",
                            "**/request/**",
                            "**/response/**",
                            "**/dto/**",
                            "**/exception/**",
                            "**/filter/**",
                            "**/*Filter*",
                            "**/converter/**",
                            "**/HealthCheckController.class",
                            "**/oauth2/**"
                    ])
                })
        )
    }
}
